package main

import "fmt"

func update(a *int, t *string) {
	// считывает как *a = *a + 5*t = *t + " Doe" поэтому не робит
	*a = *a + 5      // defrencing pointer address
	*t = *t + " Doe" // defrencing pointer address
	return
}

func main() {
	var age = 20
	var text = "John"
	fmt.Println("Before:", text, age)

	update(&age, &text)

	fmt.Println("After :", text, age)
}

=====================================
// последняя запятая должна считываться, без неё не должно работать
package main

import "fmt"

func main() {
	fmt.Printf(
		"100 (°F) = %.2f (°C)\n",
		func(f float64) float64 {
			return (f - 32.0) * (5.0 / 9.0)
		}(100),
	)
}

=====================================
package main

import (
    "fmt"
    "unicode/utf8"
)

func main() {
	function(n-1)
}

=====================================

package main

import "fmt"

type person struct {
    name string
    age  int
}

func newPerson(name string) *person {

	// !!! {x:x}
    p := person{name: name}
    p.age = 42
    return &p
}

func main() {

    fmt.Println(person{"Bob", 20})

    fmt.Println(person{name: "Alice", age: 30})

    fmt.Println(person{name: "Fred"})

    fmt.Println(&person{name: "Ann", age: 40})

    fmt.Println(newPerson("Jon"))

	// same
    s := person{name: "Sean", age: 50}
    fmt.Println(s.name)

    sp := &s
    fmt.Println(sp.age)

    sp.age = 51
    fmt.Println(sp.age)

    dog := struct {
        name   string
        isGood bool
    }{
        "Rex",
        true,
    }
    fmt.Println(dog)
}

=================================
package main

import "fmt"

type List[T any] struct {
    head, tail *element[T]
}
