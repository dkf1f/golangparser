package main
 
import (
	"fmt"
	"time"
)
 
func main() {
	// работает с костылем 
	// today должен распознаваться в токен IdentifierList 
	// но этого не происходит
	switch today := time; {
	case today.Day() < 5:
		fmt.Println("Clean your house.")
	case today.Day() <= 10:
		fmt.Println("Buy some wine.")
	case today.Day() > 15:
		fmt.Println("Visit a doctor.")
	case today.Day() == 25:
		fmt.Println("Buy some food.")
	default:
		fmt.Println("No information available for that day.")
	}
}



package main
 
import "fmt"
 
func main() {
 
	// Example 1
	strDict := map[string]string{"Japan": "Tokyo", "China": "Beijing", "Canada": "Ottawa"}
	for index, element := range strDict {
		fmt.Println("Index :", index, " Element :", element)
	}
 
	// Example 2
	for key := range strDict {
		fmt.Println(key)
	}
 
	// Example 3
	for _, value := range strDict {
		fmt.Println(value)
	}
}

==== ВЫШЕ ДВА ВЗАИМОИСКЛЮЧАЮЩИХ ПРИМЕРА ХЗ ЧЕ ДЕЛАТЬ ==== 
==== ЕСЛИ ДОБАВИТЬ КОСТЫЛЬНОЕ ПРАВИЛО ДЛЯ ПЕРВОГО, ПЕРЕСТАЕТ РАБОТАТЬ ВТОРОЕ ==== 

package main

import "fmt"

func update(a *int, t *string) {
	// считывает как *a = *a + 5*t = *t + " Doe" поэтому не робит
	// наверное можно как то приоритеты добавить хз не умею
	*a = *a + 5      // defrencing pointer address
	*t = *t + " Doe" // defrencing pointer address
	return
}

func main() {
	var age = 20
	var text = "John"
	fmt.Println("Before:", text, age)

	update(&age, &text)

	fmt.Println("After :", text, age)
}

// последняя запятая должна считываться, без неё не должно работать
package main

import "fmt"

func main() {
	fmt.Printf(
		"100 (°F) = %.2f (°C)\n",
		func(f float64) float64 {
			return (f - 32.0) * (5.0 / 9.0)
		}(100),
	)
}



